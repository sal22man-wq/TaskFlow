# TaskFlow Windows Server Build Script
# ุดุฑูุฉ ุงุดุฑุงู ุงููุฏู ูุชูููููุฌูุง ุงููุนูููุงุช

Write-Host "===============================================" -ForegroundColor Cyan
Write-Host "    TaskFlow - Windows Server Build" -ForegroundColor Green
Write-Host "    ุจูุงุก ููู ุงูุชูููุฐู ููููุฏูุฒ ุณูุฑูุฑ" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Cyan
Write-Host ""

# Check if running as Administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
if (-not $isAdmin) {
    Write-Warning "ูููุตุญ ุจุชุดุบูู PowerShell ููุฏูุฑ"
}

# Step 1: Check Node.js
Write-Host "[1/6] ุงูุชุญูู ูู Node.js..." -ForegroundColor Yellow
try {
    $nodeVersion = node --version
    Write-Host "โ Node.js ูุซุจุช: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Error "โ Node.js ุบูุฑ ูุซุจุช. ูุฑุฌู ุชุซุจูุชู ูู https://nodejs.org/"
    exit 1
}

# Step 2: Install dependencies
Write-Host "[2/6] ุชุซุจูุช ุงูุชุจุนูุงุช..." -ForegroundColor Yellow
try {
    npm install
    Write-Host "โ ุชู ุชุซุจูุช ุงูุชุจุนูุงุช" -ForegroundColor Green
} catch {
    Write-Error "โ ูุดู ูู ุชุซุจูุช ุงูุชุจุนูุงุช"
    exit 1
}

# Step 3: Install pkg globally
Write-Host "[3/6] ุชุซุจูุช ุฃุฏุงุฉ ุจูุงุก ุงููููุงุช ุงูุชูููุฐูุฉ..." -ForegroundColor Yellow
try {
    npm install -g pkg
    Write-Host "โ ุชู ุชุซุจูุช pkg" -ForegroundColor Green
} catch {
    Write-Error "โ ูุดู ูู ุชุซุจูุช pkg"
    exit 1
}

# Step 4: Build application
Write-Host "[4/6] ุจูุงุก ุงูุชุทุจูู..." -ForegroundColor Yellow
try {
    npm run build
    Write-Host "โ ุชู ุจูุงุก ุงูุชุทุจูู" -ForegroundColor Green
} catch {
    Write-Error "โ ูุดู ูู ุจูุงุก ุงูุชุทุจูู"
    exit 1
}

# Step 5: Create executable
Write-Host "[5/6] ุฅูุดุงุก ุงูููู ุงูุชูููุฐู..." -ForegroundColor Yellow

# Create temporary package.json for exe
$exeConfig = @{
    name = "taskflow-server"
    version = "1.0.0"
    main = "dist/index.js"
    type = "module"
    bin = "dist/index.js"
    pkg = @{
        scripts = @("dist/**/*.js")
        assets = @(
            "client/dist/**/*"
        )
        targets = @("node18-win-x64")
        outputPath = "build"
    }
} | ConvertTo-Json -Depth 10

$exeConfig | Out-File -FilePath "package-exe.json" -Encoding UTF8

try {
    # Build executable
    pkg . --config package-exe.json --out-path build
    
    # Create build directory if not exists
    if (-not (Test-Path "build")) {
        New-Item -ItemType Directory -Path "build"
    }
    
    # Copy client files
    if (Test-Path "client/dist") {
        Copy-Item -Path "client/dist" -Destination "build/client" -Recurse -Force
    }
    
    # Copy environment template
    if (Test-Path ".env.example") {
        Copy-Item -Path ".env.example" -Destination "build/.env.example"
    }
    
    Write-Host "โ ุชู ุฅูุดุงุก ุงูููู ุงูุชูููุฐู" -ForegroundColor Green
} catch {
    Write-Error "โ ูุดู ูู ุฅูุดุงุก ุงูููู ุงูุชูููุฐู: $_"
    exit 1
} finally {
    # Clean up temporary files
    if (Test-Path "package-exe.json") {
        Remove-Item "package-exe.json"
    }
}

# Step 6: Create startup script
Write-Host "[6/6] ุฅูุดุงุก ุณูุฑููพุชุงุช ุงูุชุดุบูู..." -ForegroundColor Yellow

$startScript = @"
@echo off
title TaskFlow - Windows Server
color 0A

echo ===============================================
echo      TaskFlow Server - Standalone
echo      ุดุฑูุฉ ุงุดุฑุงู ุงููุฏู ูุชูููููุฌูุง ุงููุนูููุงุช  
echo ===============================================
echo.

echo [%time%] Setting up Windows Server environment...
echo Server: %COMPUTERNAME%
echo User: %USERNAME%
echo.

:: Set environment variables
set NODE_ENV=production
set PORT=5000

:: Configure Windows Firewall
echo [%time%] Configuring Windows Firewall...
netsh advfirewall firewall add rule name="TaskFlow Application" dir=in action=allow protocol=TCP localport=5000 >nul 2>&1

echo [%time%] Starting TaskFlow Server...
echo.
echo ===============================================
echo Server Information:
echo - URL: http://localhost:5000
echo - URL: http://%COMPUTERNAME%:5000
echo - Environment: Production
echo ===============================================
echo.
echo Default Login Credentials:
echo Username: administrator
echo Password: wdq@#$
echo.
echo Press Ctrl+C to stop the server
echo ===============================================
echo.

taskflow-server.exe

echo.
echo [%time%] TaskFlow server stopped
pause
"@

$startScript | Out-File -FilePath "build/start-taskflow.bat" -Encoding ASCII

# Create installation guide
$readme = @"
TaskFlow - Windows Server Application
ุดุฑูุฉ ุงุดุฑุงู ุงููุฏู ูุชูููููุฌูุง ุงููุนูููุงุช

=== ูุชุทูุจุงุช ุงูุชุดุบูู ===
1. Windows Server 2016 ุฃู ุฃุญุฏุซ
2. PostgreSQL 12 ุฃู ุฃุญุฏุซ

=== ุฎุทูุงุช ุงูุชุดุบูู ===
1. ุชุฃูุฏ ูู ุชุซุจูุช PostgreSQL ูุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช: taskflow_db
2. ุงูุณุฎ .env.example ุฅูู .env ูุนุฏู ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
3. ุดุบู: start-taskflow.bat

=== ุงููุตูู ููุชุทุจูู ===
- ุงูุฑุงุจุท ุงููุญูู: http://localhost:5000
- ุงูุฑุงุจุท ุนูู ุงูุดุจูุฉ: http://[server-name]:5000

=== ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู ุงูุงูุชุฑุงุถูุฉ ===
- ุงุณู ุงููุณุชุฎุฏู: administrator
- ูููุฉ ุงููุฑูุฑ: wdq@#$

=== ููุงุญุธุงุช ุฃูููุฉ ===
- ุบูุฑ ูููุฉ ุงููุฑูุฑ ุงูุงูุชุฑุงุถูุฉ ููุฑ ุชุณุฌูู ุงูุฏุฎูู
- ุชุฃูุฏ ูู ุฅุนุฏุงุฏุงุช Windows Firewall
- ุงุนูู ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจุงูุชุธุงู

=== ุงูุฏุนู ุงูููู ===
ุฑุงุฌุน ูููุงุช ุงููุซุงุฆู ุงููุฑููุฉ ุฃู ุงุชุตู ุจูุฑูู ุงูุฏุนู
"@

$readme | Out-File -FilePath "build/README.txt" -Encoding UTF8

Write-Host ""
Write-Host "===============================================" -ForegroundColor Cyan
Write-Host "         ุชู ุฅูุดุงุก ุงูููู ุงูุชูููุฐู ุจูุฌุงุญ!" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "ุงููููุงุช ุงููููุดุฃุฉ:" -ForegroundColor Yellow
Write-Host "๐ ูุฌูุฏ ุงูุจูุงุก: build/" -ForegroundColor White
Write-Host "โก ุงูููู ุงูุชูููุฐู: build/taskflow-server.exe" -ForegroundColor White
Write-Host "๐ ุณูุฑููพุช ุงูุชุดุบูู: build/start-taskflow.bat" -ForegroundColor White
Write-Host "๐ ุฏููู ุงูุชุดุบูู: build/README.txt" -ForegroundColor White
Write-Host ""
Write-Host "ููุชุดุบูู:" -ForegroundColor Yellow
Write-Host "1. ุงูุชูู ุฅูู ูุฌูุฏ build/" -ForegroundColor White
Write-Host "2. ุดุบู start-taskflow.bat" -ForegroundColor White
Write-Host ""
Write-Host "ุฃู ุดุบู ูุจุงุดุฑุฉ: build/taskflow-server.exe" -ForegroundColor White
Write-Host ""

# Ask if user wants to test the executable
$choice = Read-Host "ูู ุชุฑูุฏ ุชุดุบูู ุงูููู ุงูุชูููุฐู ุงูุขูุ (y/n)"
if ($choice -eq "y" -or $choice -eq "Y") {
    Write-Host "ุจุฏุก ุชุดุบูู TaskFlow..." -ForegroundColor Green
    Set-Location build
    Start-Process "start-taskflow.bat"
}